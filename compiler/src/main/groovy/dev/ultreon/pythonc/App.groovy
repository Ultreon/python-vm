/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.ultreon.pythonc

import org.jetbrains.annotations.NotNull

import java.lang.management.ManagementFactory

class App {
    static void main(String[] args) throws IOException {
        String jarFile = ManagementFactory.runtimeMXBean.name.split("@")[0]
        if (jarFile == null) {
            jarFile = "<filename>.jar"
        }

        ArgParsed result = parseArgs(args)

        if (result.outputJar() == null && result.outputDir() == null) {
            System.err.println("Usage: java -jar " + jarFile + " -j <output jar> <python file> ...")
            System.err.println("Usage: java -jar " + jarFile + " -o <output directory> <python file> ...")
            System.exit(1)
        }

        if (result.sources().empty) {
            System.err.println("Usage: java -jar " + jarFile + " -o <output jar> <python file> ...")
            System.exit(1)
        }

        for (String source : result.sources()) {
            if (!new File(source).exists()) {
                System.err.println("Source directory does not exist: " + source)
                System.exit(1)
            }
        }
        for (String source : result.sources()) {
            PythonCompiler.compileSources(source, result.outputDir())
        }
        if (result.outputJar != null) PythonCompiler.pack(result.outputDir(), result.outputJar())
    }

    private static @NotNull
    ArgParsed parseArgs(String[] args) {
        String outputJar = null
        String outputDir = null
        List<String> sources = new ArrayList<>()

        for (int i = 0, argsLength = args.length; i < argsLength; i++) {
            String arg = args[i]
            if (arg == "-j") {
                outputJar = args[i + 1]
                i++
                continue
            }
            if (arg == "-o") {
                outputDir = args[i + 1]
                i++
                continue
            }

            if (arg.startsWith("-")) {
                System.err.println("Unknown argument: " + arg)
                System.exit(1)
            }

            sources.add(arg)
        }
        return new ArgParsed(outputJar, outputDir, sources)
    }

    private static final class ArgParsed {
        private final String outputJar
        private final String outputDir
        private final List<String> sources

        private ArgParsed(String outputJar, String outputDir, List<String> sources) {
            this.outputJar = outputJar
            this.outputDir = outputDir
            this.sources = sources
        }

        String outputJar() {
            return outputJar
        }

        String outputDir() {
            return outputDir
        }

        List<String> sources() {
            return sources
        }

        @Override
        boolean equals(Object obj) {
            if (obj == this) return true
            if (obj == null || obj.class != this.class) return false
            var that = (ArgParsed) obj
            return Objects.equals(this.outputJar, that.outputJar) &&
                    Objects.equals(this.outputDir, that.outputDir) &&
                    Objects.equals(this.sources, that.sources)
        }

        @Override
        int hashCode() {
            return Objects.hash(outputJar, outputDir, sources)
        }

        @Override
        String toString() {
            return "ArgParsed[" +
                    "outputJar=" + outputJar + ", " +
                    "outputDir=" + outputDir + ", " +
                    "sources=" + sources + ']'
        }
    }
}
