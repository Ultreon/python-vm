/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  application
  `java-library`
}

group = "dev.ultreon.pythonvm"
version = "1.0"

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

sourceSets {
  main {
    java {
      srcDir("src/main/gen")
    }
  }
}

dependencies {
  api(libs.annotations)
  // Use JUnit Jupiter for testing.
  testImplementation(libs.junit.jupiter)

  testRuntimeOnly("org.junit.platform:junit-platform-launcher")

  // This dependency is used by the application.
  api(libs.guava)

  // Antlr4 Runtime
  api(libs.antlr.runtime)

  // ASM
  api(libs.asm)
  api(libs.asm.tree)
  api(libs.asm.util)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

application {
  // Define the main class for the application.
  mainClass = "org.example.App"
}

tasks.register<Jar>("dist") {
  manifest {
    attributes["Main-Class"] = "dev.ultreon.pythonc.App"
  }

  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from(
    configurations.runtimeClasspath.get()
      .map { if (it.isDirectory) it else zipTree(it) } + sourceSets.main.get().output)

  archiveFileName.set("pythonvm-compiler.jar")
}

tasks.jar.get().finalizedBy("dist")

tasks.named<Test>("test") {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}
